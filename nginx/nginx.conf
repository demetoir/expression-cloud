#error_log  logs/error.log;
#pid        logs/nginx.pid;
#worker_rlimit_nofile 8192;

# reference: https://gist.github.com/terrywang/9612069
# User and group used by worker processes
user www-data;

# Ideally # of worker processes = # of CPUs or cores
# Set to auto to autodetect
# max_clients = worker_processes * worker_connections
worker_processes auto;


# pid /run/nginx.pid;

# Maximum number of open file descriptors per process
# should be > worker_connections
worker_rlimit_nofile 10240;

events {
  # Use epoll on Linux 2.6+
  use epoll;

  # Max number of simultaneous connections per worker process
  worker_connections 2048;
  # Accept all new connections at one time
  multi_accept on;
}

http {

  ##
  # Basic Settings
  ##

  # Hide nginx version information
  server_tokens off;

  # Speed up file transfers by using sendfile() to copy directly
  # between descriptors rather than using read()/write()
  sendfile on;

  # Tell Nginx not to send out partial frames; this increases throughput
  # since TCP frames are filled up before being sent out (adds TCP_CORK)
  # Send the response header and the beginning of a file in one packet
  # Send a file in full packets
  tcp_nopush on;

  # Tell Nginx to enable the Nagle buffering algorithm for TCP packets
  # which collates several smaller packets together into one larger packet
  # thus saving bandwidth at the cost of a nearly imperceptible increase to latency
  tcp_nodelay off;

  send_timeout 30;

  # How long to allow each connection to stay idle;
  # Longer values are better for each individual client, especially SSL
  # But means that worker connections are tied up longer.75
  keepalive_timeout 60;

  keepalive_requests 200;
  # client_header_timeout 20;
  # client_body_timeout 20;
  reset_timedout_connection on;

  types_hash_max_size 2048;

  server_names_hash_bucket_size 64;
  # server_name_in_redirect off;

  include ./mime.types;
  # default_type application/octet-stream;
  default_type text/html;
  charset UTF-8;

  ##
  # Logging Settings
  ##

  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;

  ##
  # Gzip Settings
  ##

  # Enable Gzip compression
  gzip on;

  # This should be turned on if pre-compressed copies (.gz) of static files exist
  # If NOT it should be left off as it will cause extra I/O
  # default: off
  # gzip_static on;

  # Do NOT compress anything smaller than 256 bytes
  gzip_min_length 256;

  # Fuck IE6
  gzip_disable "msie6";

  # Tell proxies to cache both the gzipped and regular version of a resource
  # whenever the client's Accept-Encoding capabilities header varies;
  # Avoids the issue where a non-gzip capable client (rare)
  # would display gibberish if their proxy gave them the gzipped version.
  # gzip_vary on;

  # Compress data even for clients that are connecting via proxies
  # Identified by the "Via" header
  gzip_proxied any;

  # Compression level (1-9)
  # 5 is the perfect compromise between size and CPU usage
  gzip_comp_level 5;

  # gzip_buffers 16 8k;
  # gzip_http_version 1.1;
  gzip_types
  text/plain
  text/css
  application/json
  application/x-javascript
  text/xml
  application/xml
  application/xml+rss
  text/javascript;


  # Cache open file descriptors, their sizes and mtime
  # information on existence of directories
  # file lookup error such as "file not found", "no read permission" and so on
  #
  # Pros: nginx can immediately begin sending data when a popular file is requested
  # and will also immediately send a 404 if a file doesn't exist, and so on
  #
  # Cons: The server will NOT react immediately to changes on file system
  # which may be undesirable
  #
  # Config: inactive files are released from the cache after 20 seconds
  # whereas active (recently requested) files are re-validated every 30 seconds
  # File descriptors will NOT be cached unless they are used at least twice in 20s (inactive)
  #
  # A maximum of the 1000 most recently used file descriptors will be cached at any time
  #
  # Production servers with stable file collections will definitely want to enable the cache
  open_file_cache max=1000 inactive=20s;
  open_file_cache_valid    30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors   on;

  ##
  # nginx-naxsi config
  ##
  # Uncomment it if you installed nginx-naxsi
  ##

  #include /etc/nginx/naxsi_core.rules;

  ##
  # nginx-passenger config
  ##
  # Uncomment it if you installed nginx-passenger
  ##

  #passenger_root /usr;
  #passenger_ruby /usr/bin/ruby;

  ##
  # Virtual Host Configs
  ##

#  include ./conf.d/*.conf;
  include sites-enabled/*;


  # default proxy setting
  include    ./proxy.conf;
}

